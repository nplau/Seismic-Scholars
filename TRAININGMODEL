import numpy as np
import torch
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image

# Step 1: Define a function to extract features using a pre-trained ResNet model
def extract_features(image_path, model, transform):
    image = Image.open(image_path)
    image = transform(image).unsqueeze(0)  # Apply transformations and add batch dimension
    with torch.no_grad():  # No need to compute gradients
        features = model(image)
    return features.squeeze().numpy()  # Convert to numpy array

# Step 2: Load the pre-trained ResNet model for feature extraction
model = models.resnet50(pretrained=True)
model = torch.nn.Sequential(*list(model.children())[:-1])  # Remove the last classification layer
model.eval()  # Set model to evaluation mode

# Step 3: Define image transformation (ResNet requires images of size 224x224)
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Step 4: Process the 77 images and extract features
input_folder = r'/Users/sanjithavasu/Desktop/space_apps_2024_seismic_detection/new plots'  # Update with your folder path
training_features = []

for filename in os.listdir(input_folder):
    if filename.endswith('.jpg') or filename.endswith('.png'):  # Adjust file types if needed
        image_path = os.path.join(input_folder, filename)
        #print(f'Processing file: {image_path}')
        features = extract_features(image_path, model, transform)
        training_features.append(features)

# Step 5: Compute the average feature vector
training_features = np.array(training_features)  # Convert to numpy array
average_feature_vector = np.mean(training_features, axis=0)  # Take the mean across all 77 images

# Step 6: Function to calculate cosine similarity
def cosine_similarity(vec1, vec2):
    dot_product = np.dot(vec1, vec2)
    norm1 = np.linalg.norm(vec1)
    norm2 = np.linalg.norm(vec2)
    return dot_product / (norm1 * norm2)

# Step 7: Compare a new test image to the average feature vector
test_image_path = r'/Users/sanjithavasu/Desktop/space_apps_2024_seismic_detection/test/extracted_2_hours.png'  # Update with test image path
test_features = extract_features(test_image_path, model, transform)

# Step 8: Compute similarity between test image and average feature vector
similarity_score = cosine_similarity(test_features, average_feature_vector)
print(f'Similarity score between test image and average: {similarity_score:.2f}')
